// //1.전연 변수와 지역 변수 차이를
// // 알아보겠습니다.

// //case1 지역 변수를 사용할 때 ,
// function select() {
//     var a = 100; //지역변수
//     a++;
//     return a;
//     // select 값에 있는 a를 easy에서 사용하고 싶으면 return=0; 입력
// }






// function easy(){
// var a=100;
// alert( "출력 :" + select());
// // select함수에 있는 a의 값을 return으로 가져다가 함수 easy로 호출해옴.
// // return을 사용했을 때 ,  a변수 안에 있는  값이 easy로 내려옴
// // 지역 변수를 사용해서 가져오는 방법은 return을 사용하는 방법 뿐이다.
// }





    //case2 전역 변수를 사용할 때 
    // **전역 변수를 사용하면 편하지만 , 
    // 전역 변수를 마구잡이로 남용하면 코드를 읽기 힘들어진다.
    // 전체를 봐야 하기 때문에 , 예측이 힘들어진다.

    //2. 두개의 함수를 통해 전역과 지역사용 비교
    //3. 3개 함수 연계

    // var a = 100; //전역변수
    // function select() {
    //     a++;
    // }



//     function easy(){
//         select();
//         alert( "출력 :" +a);
//     }

//  //숫자나 연산자를 클릭하면 input 태그에 출력시키기!
    // 클릭한 숫자나 연산자가 input 태그에 계속 나오게 만들기
    // 하려면 어떻게 해야할까요?



    let out=""; //전역변수 - 내가 클릭한 숫자나 연산자를 쌓아두기 위해서
                //전역 변수가 아니고 지역변수로 생성시 클릭할때마다 새로운
                //지역변수가 생성된다. 이전에 클릭했던 내용은 사라진다.


    let op=""; // 연산자를 저장할 전역변수
                // 전역으로 만드는 이유는 연산자 입력후 두번째 숫자를 입력하기 때문에
                // 연산자를 함수의 종료와 함께 날려버리면 안되니까
    let num1 =0; // 첫번째 피연산자  
                // function 밖으로 빼낸다.(전역변수) , 첫번째 피연산자.
    let num2=0;  // 두번째 피연산자
                 //전역변수니깐 그냥 어디서든 사용 다 가능하니 가져다 쓰면 된다!

    function select(val){
        if(val === "="){ // 계산 결과를 보기 위해 = 클릭했을 경우 실행되는 if문
            out = calc();  // 계산하기 위한 함수 , 계산된 결과를 반환(return)할 것이다.
            num1 = out;
            // select() 함수 내부에서 "="를 클릭하면 이전 계산 결과를 out 변수에 저장하고, 
            //num1 변수에 이전 계산 결과를 할당합니다. 
            //이렇게 하면 이전 계산 결과가 첫 번째 피연산자로 설정됩니다.
        } else{
            out = out +val;
        
        
            if(typeof(val) ==='string'){ //val 변수의 값이 문자열인지 확인 (연산자 클릭한 경우)
                op=val; // 숫자를 제외한 문자열 값
                //alert("연산자 입니다.");
            } 
            if(op === ""){// op 변수가 빈 값이면 연산자를 클릭하기 전이다.
                num1= Number(out);
                // 첫번째 숫자는 연산자를 클릭하기 전까지가
                //첫번째 피연산자이다. 연산자를 클릭한 이후부터는
                // 두번째 피연산자 숫자가 들어와야 한다.
                // 연산자 이전과 이후가 구분이 되어야 피연산자 1과 피연산 2로 나누어줄수 있다.
            } 
            else{ //op 변수가 빈값이 아니라면 두번째 피연산자
                var index=out.indexOf(op)+1;
                num2=Number(out.slice(index));
        }
            
    }
        document.getElementById("result").value=out; //계산된 결과값 출력
}




function calc(){
    switch(op){
    case "+":
        return num1+num2;

    case "-":
        return num1-num2;


    case "*":
        return num1*num2;


    case "/":
        return parseInt(num1/num2);
        //연산은 소수점도 나오니깐 정수만 나오게 하기 위해 parseInt
    }
}



//7+8이고 = 클릭하면 15가 출력된다.
//15에+클릭하고 4를 클릭하면 19가 나오게 하려면 어떻게 해야할까?
